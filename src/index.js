import { config } from 'dotenv';
import { Client, Routes } from 'discord.js';    
import { REST } from '@discordjs/rest';
import { GoogleSpreadsheet } from 'google-spreadsheet'
import { readFileSync } from 'fs';

import { Roles } from './enum/Roles.js';
import { isInArray } from './utils/isInArray.js';

config();

const TOKEN = process.env.BOT_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const SHEET_ID = process.env.SHEET_ID;
const CREDENTIALS = JSON.parse(readFileSync('sheets_creds.json'));

const doc = new GoogleSpreadsheet(SHEET_ID);
await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: CREDENTIALS.client_email,
    private_key: CREDENTIALS.private_key,
});

const client = new Client({intents: ['Guilds', 'GuildMessages']});
const rest = new REST({version: '10'}).setToken(TOKEN);

const onDutyEmployees = [];

client.login(TOKEN);

client.on('ready', ()  => {
    console.log('Salary Bot by Sinaps is ON and ready to use!')
})

client.on('interactionCreate', async (interaction) => {
    if (interaction.isChatInputCommand()) {
        if (interaction.commandName === 'register_employee') {
            const name = interaction.options.get('nom').member.nickname;
            const grade = interaction.options.get('grade').value;
            await doc.loadInfo();
            const sheet = doc.sheetsByTitle[interaction.options.get('job').value];
            const rows = await sheet.getRows();
            if (isInArray(rows, name)) {
                interaction.reply({content: 'Cet employée est déjà enregistré.'});
                return;
            };
            await sheet.addRow({'Nom + Prénom': name, 'Heures travaillées': 0, 'Grade': grade, 'Salaire': '0$', 'Service': 'OFF'});
            interaction.reply({content: 'Employée enregistrée avec succès!'});
        } else if (interaction.commandName === 'duty_on') {
            await doc.loadInfo();
            const sheet = doc.sheetsByTitle[interaction.options.get('job').value];
            const rows = await sheet.getRows();
            for (let i = 0; i < rows.length; i++) {
                if (rows[i]._rawData[0] === interaction.member.nickname) {
                    rows[i]._rawData[4] = 'ON'
                    await rows[i].save();
                    onDutyEmployees.push({
                        name: interaction.member.nickname,
                        dutyOnTime: new Date(),
                        dutyOffTime: null
                    })
                    interaction.reply({content: 'Votre service est activé.'});
                }
            }
        } else if (interaction.commandName === 'duty_off') {
            await doc.loadInfo();
            const sheet = doc.sheetsByTitle[interaction.options.get('job').value];
            const rows = await sheet.getRows();
            for (let i = 0; i < rows.length; i++) {
                if (rows[i]._rawData[0] === interaction.member.nickname) {
                    rows[i]._rawData[4] = 'OFF'
                    let time = new Date();
                    // get number of hours worked
                    let hours = (time.getTime() - onDutyEmployees[0].dutyOnTime.getTime()) / 3600000;
                    rows[i]._rawData[2] = Math.ceil(rows[i]._rawData[2] + hours);
                    console.log(hours)
                    await rows[i].save();
                    interaction.reply({content: 'Votre service est désactivé.'});
                }
            }
        }
    }
})

async function main() {
    await doc.loadInfo();
    const sheet = await doc.sheetsByTitle['Liste des jobs'];
    const rows = await sheet.getRows();
    const jobs = []
    for (let i = 0; i < rows.length; i++) {
        jobs.push({
            name: rows[i]._rawData[0],
            value: rows[i]._rawData[0]
        })
    }
    
    const commands = [
        {
            name: 'duty_on',
            description: 'Prenez votre service avec cette commande.',
            options: [
                {name: 'job', description: 'Job de l\'employée.', type: 3, required: true, choices: jobs}
            ]
        },
        {
            name: 'duty_off',
            description: 'Vous déposez votre service avec cette commande.',
            options: [
                {name: 'job', description: 'Job de l\'employée.', type: 3, required: true, choices: jobs}
            ]
        },
        {
            name: 'register_employee',
            description: 'Enregistrer un nouveau employée dans la base de donnée du bot.',
            options: [
                {name: 'nom', description: 'Nom de l\'employée.', type: 6, required: true},
                {name: 'grade', description: 'Grade de l\'employée.', type: 3, required: true, choices: Roles},
                {name: 'job', description: 'Job de l\'employée.', type: 3, required: true, choices: jobs}
            ]
        },
        {
            name: 'register_job',
            description: 'Enregistrer un nouveau job dans la base de donnée du bot.',
            options: [
                {name: 'nom', description: 'Nom du job.', type: 3, required: true},
                {name: 'job', description: 'Job de l\'employée.', type: 3, required: true, choices: jobs}
            ]
        }
    ]

    try {
        console.log('Started refreshing application (/) commands.');
        await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), {
            body: commands
        })
    } catch (err) {
        console.log(err)
    }
}

main();